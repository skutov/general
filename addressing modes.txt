For the initialisation section where the code is copied into RAM then an indexed absolute method should be used as this would allow the code to be copied a line at a time to RAM with as little code required as possible. This would also allow the destination within RAM that the code is to be copied to to be changed on run, this could be useful if the size and/or start locaion of the array for the main section of the code changed between runs.
During the running of the program there are three main operations that are carried out, the first is reading from the input port. This would call for an absolute addressing as the location of the I/O port would remain constant relative to the start address of the systems RAM. This would be the most basic method of accessing the I/O ports as the addresses would not have to change between runs.
The second occasion during the main body of the code would be when reading a value from the array indexed by the value read from the input port. This would best be achieved with a base plus index addressing scheme. This would allow the starting address of the array to be stored in a register and for the value taken from the input to be passid as the index which would point to the appropriate value within the array. This form of addressing would be the most efficient as there would be the smallest number of operations required to retrieve the correct value of data.
The third action consists of writing the retrieved value to the output port. Usually this would use the same mode as the first action, however if the output is buffer based then you would have to use an address with an index. This would change based on how far into the buffer the writing has to occur.

Select a processor from the list below and provide a short descr iption of the register
set from a programmers perspective along with a summary of the addressing modes
provided by your chosen processor.

I have chosen tthe TI MSP430 to talk about. The chip holds 16 16-bit registers. Of these 4 of them are held for special purposes. The program counter is held in R0, the stack pointer is in R1, status register R2, the constant generator (a special register that provides access to 6 commonly used values with no need for an additional operand) and R3 which always reads 0 and ignores any write attempts. R4 to R15 are avaliable for general use and could be used in this program for various reasons. The main ones that would be of interest in these circumstances would be the program counter which points towards the current instruction that's being executed, the stack pointer which points to the top of the stack which regulates the passing of information to subroutines and such. The status register which would hold bits to show if there were any data waiting on the input. 

I believe that the TI MSP430 would be the best suited chip for this task. The main reason for this is because it is capable of working with all of the required addressing mentioned above and has a multitude of registers avaliable for further expansion on the concept of the code.